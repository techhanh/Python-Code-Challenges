**Problem Statement**
- Create a function named get_highest_rated that is responsible for finding the highest rated restaurant (from a list of restaurants with its rating)
- This function should take in a list of dictionaries named restaurants as a parameter. Each dictionary represents the data associated with a restaurant, including its rating. This function should have a return value of the restaurant with the highest rating.


**Prompts**
List three or more questions whose answers would clarify the problem statement. For each question, provide an answer which includes the effect your decision would have on how you would approach the problem.
1. What happens if there are multiple restaurants with the same highest rating?
    - all restaurants with the same highest rating should be outputted
2. What happens if there is no rating available yet for this restaurant (edge case test)?
    - It should output a string as “Rating Not Available”
3. What happens if a rating is a string instead of a numeric value?
    - an error message should occur


***Challenge 1: Writing Tests Codes***
Use the comments provided to write at least two example input/outputs.
1. Consider at least one nominal and one edge case.
    a. nominal test1: 3 different restaurant name with 3 different ratings
    b. nominal test2: different restaurant with same highest ratings
    c. edge case test1: a restaurant that has a blank rating
    d. edge case test2: a rating that is not a numeric value
    
2. What is the expected output for the given input?
    a. nominal test1: the dict key value pair that has the highest rating from the list of elements
    b. nominal test2: all the dict key value pair that has the highest rating from the list of elements
    c. edge case test1: a “Rating Not Available” string
    d. edge case test2: exception (TypeError), rating should be a numeric value but it is a string

3. Write unit tests for get_highest_rated for the nominal and edge cases you identified in the first step.
    a. def test_pick_highest_rated_from_list()
    b. def test_returns_all_highest_rated_from_list()
    c. def test_rating_None_returns_Rating_not_Available()
    d. def test_returns_TypeError_msg_not_supported_between_instances_of_str_and_int()


**Challenge 2: Writing Pseudocodes**
 Without writing code, describe how you would implement `get_highest_rating` in enough detail that someone else could write the code.
