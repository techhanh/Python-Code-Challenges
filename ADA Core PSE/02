**Problem Statement**

Imagine programming the logic for a word game. In this game, every player submits one word. Each word gets a score based on the letters in the word and its point value.
- Create a function named score that is responsible for scoring a given word.
- This function should take in a string named word as a parameter.
- This function should return the word’s total number of points

Refer to this table for the point vales of each letter:
Letter	                          Value
A, E, I, O, U, L, N, R, S, T	    1
D, G	                            2
B, C, M, P	                      3
F, H, V, W, Y	                    4
K	                                5
J, X	                            8
Q, Z	                            10

Example:
Input	    Expected Output
"DOG"	    5
"CAT"	    5
"CABBAGE" 14
"QUARTZ"  24


**Prompts**

List three or more questions whose answers would clarify the problem statement. For each question, provide an answer which includes the effect your decision would have on how you would approach the problem.

1. What if there is a blank input?
    -blank returns 0
    
2. What if there is an invalid input (something else other than an alphabetical character like a number or symbol?)
    -invalid character returns TypeError (should be alphabetic characters only)

3. What happens if one or more of the character is lowercase?
    -use the .upper() method so the return value would not be affected
    
4. What happens if there are multiple words in a string ?
    -use the .replace(” “, “”) method so the return value would not be affected
        
        (the method removes all the empty spaces in a string)


**Challenge 1: Writing Test**

1. Use the comments provided to write at least two example inputs/outputs?
    a. nominal: 
        i. “JAZZ” = 29
        ii. “dog” = 5
        iii. “mouse cheese” = 18
        iv. “key!5” = 10
    b. edge:
        i. 5 = TypeError
        ii. @ = SyntaxError
        iii. “” = 0
        iv. ["one", "two"] = TypeError
        
2. Write unit tests for score for the nominal and edge cases you identified in the first step.
    a. nominal: 
        i. def test_returns_29_for_string_JAZZ():
        - (test upper case)
        ii. def test_returns_5_for_string_dog():
        - (test lower case)
        - (will convert the lower case to upper case)
        iii. def test_returns_18_for_string_mouse_cheese():
        - (test for multiple words in a string)
        - (will remove all the spaces in a string)
        iv. def test_returns_10_for_string_symbol_number_key!5():     
        - (test for strings that contain alphabetical characters, symbols, and numeric value)
        - (will ignore everything else in the string except for the alphabetical characters)
    b. edge:
        i. def test_returns_TypeError_msg_int_object_is_not_iterable_for_number_5():
        - (test for numeric data type)
        - TypeError: 'int' object is not iterable
        ii. def test_returns_SyntaxError_msg_invalid_syntax_for_symbol_input():
        - (test for a symbol data type)
        - SyntaxError: invalid syntax
        iii. def test_returns_0_for_empty_string():
        - (test for an empty string)
        iv. def test_returns_TypeError_for_list():
        - test for a list of values/elements

# NOMINAL TEST 1
def test_returns_29_for_string_JAZZ():
  # arrange
  word = "JAZZ"

  # act
  total_scores = score(word)

  # assert
  assert total_scores == 29

# NOMINAL TEST 2
def test_returns_5_for_string_dog():
  # arrange
  word = "dog"

  # act
  total_scores = score(word)

  # assert
  assert total_scores == 5

# NOMINAL TEST 3
def test_returns_18_for_string_mouse_cheese():
  # arrange
  word = "mouse cheese"

  # act
  total_scores = score(word)

  # assert
  assert total_scores == 18

# NOMINAL TEST 4
def test_returns_10_for_string_symbol_number_key!5():   
  # arrange
  word = "key!5"

  # act
  total_scores = score(word)

  # assert
  assert total_scores == 10

# EDGE TEST 1
def test_returns_TypeError_msg_int_object_is_not_iterable_for_number_5():
  # arrange
  word = 5

  # act
  total_scores = score(word)

  # assert
  assert total_scores == TypeError: 'int' object is not iterable

# EDGE TEST 2
def test_returns_SyntaxError_msg_invalid_syntax_for_symbol_input():
  # arrange
  word = @

  # act
  total_scores = score(word)

  # assert
   assert total_points == SyntaxError: invalid syntax
   
# EDGE TEST 3
def test_returns_0_for_empty_string():
  # arrange
  word = ""
  
  # act
  total_points = score(word)

  # assert
  assert total_scores = 0
